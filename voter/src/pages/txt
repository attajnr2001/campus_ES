// import Navbar from "../components/Navbar";
// import President from "../helpers/President";
// import Organizer from "../helpers/Organizer";
// import Treasurer from "../helpers/Treasurer";
// import Secretary from "../helpers/Secretary";
// import {
//   collection,
//   onSnapshot,
//   doc,
//   getDocs,
//   updateDoc,
//   query,
//   where,
//   writeBatch, // Import writeBatch for batched writes
// } from "firebase/firestore"; // Import necessary Firestore functions

// const Dashboard = () => {
//   const [slides, setSlides] = useState([
//     {
//       position: "President",
//       candidates: [],
//     },
//     {
//       position: "Organizer",
//       candidates: [],
//     },
//     {
//       position: "Secretary",
//       candidates: [],
//     },
//   ]);

//   const [currentSlide, setCurrentSlide] = useState(0);
//   const [selectedCandidates, setSelectedCandidates] = useState({});
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);
//   const [voterData, setVoterData] = useState(null); // Store voter data

//   useEffect(() => {
//     const user = auth.currentUser;
//     if (user) {
//       // Retrieve voter data from LocalStorage or context here (based on your implementation)
//       const storedVoterData = JSON.parse(localStorage.getItem("user"));
//       setVoterData(storedVoterData);
//     } else {
//       setVoterData(null); // Clear voter data if not logged in
//     }
//   }, [auth.currentUser]);

//   useEffect(() => {
//     const fetchCandidates = async () => {
//       try {
//         const candidatesRef = collection(db, "candidates");
//         const candidatesSnapshot = await getDocs(candidatesRef);
//         const fetchedCandidates = candidatesSnapshot.docs.map((doc) =>
//           doc.data()
//         );
//         setSlides((prevSlides) =>
//           prevSlides.map((slide) => ({
//             ...slide,
//             candidates: fetchedCandidates.filter(
//               (candidate) => candidate.Position === slide.position
//             ),
//           }))
//         );
//         setLoading(false);
//       } catch (error) {
//         console.error("Error fetching candidates: ", error);
//         setError("Error fetching candidates. Please try again later.");
//         setLoading(false);
//       }
//     };

//     fetchCandidates();
//   }, []);

//   const nextSlide = () => {
//     setCurrentSlide((prevIndex) =>
//       prevIndex === slides.length - 1 ? 0 : prevIndex + 1
//     );
//   };

//   const prevSlide = () => {
//     setCurrentSlide((prevIndex) =>
//       prevIndex === 0 ? slides.length - 1 : prevIndex - 1
//     );
//   };

//   const handleCandidateSelection = (position, candidateName) => {
//     setSelectedCandidates((prevSelectedCandidates) => ({
//       ...prevSelectedCandidates,
//       [position]: candidateName,
//     }));
//   };

//   const handleSubmitVoting = async () => {
//     try {
//       // Get the current user's indexNumber
//       const storedVoterData = JSON.parse(localStorage.getItem("user"));
//       const currentUserIndexNumber = storedVoterData.indexNumber;

//       if (!currentUserIndexNumber) {
//         console.error("Current user's index number not found.");
//         return;
//       }

//       // Check if the user has already voted
//       if (storedVoterData.hasVoted) {
//         console.log("User has already voted.");
//         return;
//       }

//       // Update the "votes" field for each selected candidate
//       for (const [position, candidateName] of Object.entries(selectedCandidates)) {
//         const candidatesRef = collection(db, "candidates");
//         const q = query(
//           candidatesRef,
//           where("Position", "==", position),
//           where("name", "==", candidateName) // Use candidate's name directly
//         );
//         const querySnapshot = await getDocs(q);

//         console.log("Query Snapshot for", position, candidateName, querySnapshot.docs.length);

//       }

//       // Update the hasVoted field for the current voter
//       const votersRef = collection(db, "voters");
//       const voterQuery = query(
//         votersRef,
//         where("indexNumber", "==", currentUserIndexNumber)
//       );

//       const voterSnapshot = await getDocs(voterQuery);

//       if (!voterSnapshot.empty) {
//         // Update the hasVoted field for the found document
//         const voterDoc = voterSnapshot.docs[0]; // Assuming there's only one document per indexNumber
//         await updateDoc(voterDoc.ref, { hasVoted: true });
//         console.log("Voting status updated successfully!");
//       } else {
//         console.error("Voter document not found.");
//       }
//     } catch (error) {
//       console.error("Error updating voting status: ", error);
//     }
//   };

//   return (
//     <div className="dashboard">
//       {loading ? (
//         <div>Loading...</div>
//       ) : error ? (
//         <div>Error: {error}</div>
//       ) : (
//         <div className="slideshow">
//           <div className="slide">
//             {slides[currentSlide].position === "President" && (
//               <President
//                 candidates={slides[currentSlide].candidates}
//                 selectedCandidate={selectedCandidates["President"]}
//                 handleCandidateSelection={handleCandidateSelection}
//               />
//             )}
//             {slides[currentSlide].position === "Organizer" && (
//               <Organizer
//                 candidates={slides[currentSlide].candidates}
//                 selectedCandidate={selectedCandidates["Organizer"]}
//                 handleCandidateSelection={handleCandidateSelection}
//               />
//             )}
//             {slides[currentSlide].position === "Secretary" && (
//               <Secretary
//                 candidates={slides[currentSlide].candidates}
//                 selectedCandidate={selectedCandidates["Secretary"]}
//                 handleCandidateSelection={handleCandidateSelection}
//               />
//             )}
//           </div>
//           <button className="prev" onClick={prevSlide}>
//             Prev
//           </button>
//           <button className="next" onClick={nextSlide}>
//             Next
//           </button>
//           <button className="submit" onClick={handleSubmitVoting}>
//             Submit Voting
//           </button>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Dashboard;